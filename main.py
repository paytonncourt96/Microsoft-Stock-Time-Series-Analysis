# -*- coding: utf-8 -*-
"""Streamlit_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vDFkwS8tUiroAj53W4okX9inE9JLQJ1F
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose

path = 'https://github.com/paytonncourt96/TimeSeries_Project/tree/main/'


def home_page():
    st.title("Microsoft Stock Prediction Based On Trading Patterns")
    image_url = 'https://github.com/paytonncourt96/TimeSeries_Project/raw/main/Images/Microsoft_logo.png'
    st.image(image_url,  width=600, use_column_width=False)


def decomposition():
    microsoft_stock_weekly = pd.read_csv("https://raw.githubusercontent.com/paytonncourt96/TimeSeries_Project/main/Microsoft_Stock.csv")
    microsoft_stock_weekly['Date'] = pd.to_datetime(microsoft_stock_weekly['Date'], format="%m/%d/%Y %H:%M:%S")
    microsoft_stock_weekly.set_index('Date', inplace=True)
    microsoft_stock_weekly = microsoft_stock_weekly['Close'].resample('W').mean()
    st.title("Multiplicative Decomposition")
    decomposition_mult = seasonal_decompose(microsoft_stock_weekly, model='multiplicative')
    st.write("Trend Component")
    st.line_chart(decomposition_mult.trend)

    st.write("Seasonal Component")
    st.line_chart(decomposition_mult.seasonal)

    st.write("Residual Component")
    st.line_chart(decomposition_mult.resid)


    st.title("Additive Decomposition")
    decomposition_add = seasonal_decompose(microsoft_stock_weekly, model='additive')
    st.write("Trend Component")
    st.line_chart(decomposition_add.trend)

    st.write("Seasonal Component")
    st.line_chart(decomposition_add.seasonal)

    st.write("Residual Component")
    st.line_chart(decomposition_add.resid)


def ts_plots():
    st.title("Time Series Plot")
    image_url = 'https://github.com/paytonncourt96/TimeSeries_Project/raw/main/Images/time_series1.png'
    st.image(image_url,  width=600, use_column_width=False)
    
    st.title("Scatter Plot")
    image_url = 'https://github.com/paytonncourt96/TimeSeries_Project/raw/main/Images/scatter_plot.png'
    st.image(image_url,  width=600, use_column_width=False)

def forecasts():
    st.title("Linear Forecast")
    image_url = 'https://github.com/paytonncourt96/TimeSeries_Project/raw/main/Images/Linear_Forecast.png'
    st.image(image_url,  width=600, use_column_width=False)

    st.title("Naive Forecast")
    image_url = "https://github.com/paytonncourt96/TimeSeries_Project/raw/main/Images/Naive_Forecast.png"
    st.image(image_url,  width=550, use_column_width=False)

def main():
    st.sidebar.title("Navigation")
    page_options = ["Home", "Decompositions", "Time Series Plots", "Forecasts"]
    choice = st.sidebar.selectbox("Go to", page_options)

    if choice == "Home":
        home_page()
    elif choice == "Decompositions":
        decomposition()
    elif choice == "Time Series Plots":
        ts_plots()
    elif choice == "Forecasts":
        forecasts()

if __name__ == "__main__":
    main()
